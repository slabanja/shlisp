(null ())
T
nil
(cons 1 '(2 3))
(if T 1 2)
(if nil 1 2)
(setq a '(1 2 3))
'a
(lambda () "hello world")
((lambda () "hello world"))
(setq f (lambda () "hello world"))
(f)
(progn
  (setq x 'decafbad)
  (setq g (lambda (x)
            (if (consp x)
                (car x)
              (progn
                (setq x 14)
                x))))
  x)
(g x)
x
(setq obj (let ((x 1337))
            (let ((get-x (lambda () x))
                  (inc-x (lambda (a) (setq x (+ x (if (> a 0) a 1)))))
                  (reset-x (lambda () (setq x 1337))))
            (lambda (b) (if (eq b 'get-x)
                            get-x
                          (if (eq b 'inc-x)
                              inc-x
                            (if (eq b 'reset-x)
                                reset-x
                                nil)))))))
((obj 'get-x))
((obj 'inc-x) 4)
((obj 'get-x))
((obj 'reset-x))
((obj 'get-x))
`(1 ,@(list 2 3) ,@(list 4 5))
`(1 ,(+ 2 3) ,(+ 4 5))
(setq f (lambda args (length args)))
(f)
(f 1 2 3)
(setq g (lambda (x . rest) (+ x (length rest))))
(g 0)
(g 0 1)
(g 0 1 2)
(g 0 1 2 3)
(length ())
(length "")
(length '(1 2 3))
(cond (nil 1) (T 2))
(cond ((+ 1 2) (+ 4 5)))
